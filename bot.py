import telebot
import conditions
import startCards
import config
import random


class Registration:
    started_in_chats = []

    def start(self, chat_id):
        in_list = False
        for status in self.started_in_chats:
            if chat_id in status:
                in_list = True
                status[chat_id] = True
        if not in_list:
            self.started_in_chats.insert(len(self.started_in_chats), {chat_id: True})

    def stop(self, chat_id):
        for status in self.started_in_chats:
            if chat_id in status:
                status[chat_id] = False

    def status(self, chat_id):
        try:
            for status in self.started_in_chats:
                if chat_id in status:
                    return status[chat_id]
        except IndexError or KeyError:
            return False


bot = telebot.TeleBot(config.token)
bot_name = 'Bunker Bot'
markdown = """
        *bold text*
        """
users = []
reg = Registration()


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –±—É–Ω–∫–µ—Ä. \n–ß—Ç–æ –±—ã –ø–æ–∏–≥—Ä–∞—Ç—å, –¥–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /reg_start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ /reg_end –∏–ª–∏ /game_start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.\n –î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ /reg_cancel ')


@bot.message_handler(commands=['game_start', 'reg_end'])
def game_start(message):
    if reg.status(message.chat.id):
        actual_description = conditions.description[random.randrange(0, len(conditions.description))]['value']
        actual_duration = conditions.duration[random.randrange(0, len(conditions.duration))]['value']
        actual_survivors = conditions.survivors[random.randrange(0, len(conditions.survivors))]['value']
        actual_area = conditions.area[random.randrange(0, len(conditions.area))]['value']
        actual_first_stock = conditions.stock[random.randrange(0, len(conditions.stock))]['value']
        actual_second_stock = conditions.stock[random.randrange(0, len(conditions.stock))]['value']
        bot.send_message(message.chat.id, f'*–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞*: {actual_description}\n'
                                          f'*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*: {actual_duration}\n'
                                          f'*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∂–∏–≤—à–∏—Ö*: {actual_survivors}\n'
                                          f'*–ü–ª–æ—â–∞–¥—å –±—É–Ω–∫–µ—Ä–∞*: {actual_area}\n'
                                          f'*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ*: {actual_first_stock}, {actual_second_stock}',
                         markdown, parse_mode="Markdown")
        reg.stop(message.chat.id)
        for user_chat in users:
            for chat_id in user_chat:
                for user_id in user_chat[chat_id]:
                    user_first_action = startCards.actions[random.randrange(0, len(startCards.actions))]['value']
                    user_second_action = startCards.actions[random.randrange(0, len(startCards.actions))]['value']
                    user_profession = startCards.professions[random.randrange(0, len(startCards.professions))]['value']
                    user_gender = startCards.gender[random.randrange(0, len(startCards.gender))]['value']
                    user_age = random.randrange(14, 95)
                    user_health = startCards.health[random.randrange(0, len(startCards.health))]['value']
                    user_phobia = startCards.phobias[random.randrange(0, len(startCards.phobias))]['value']
                    user_hobby = startCards.hobbies[random.randrange(0, len(startCards.hobbies))]['value']
                    user_character = startCards.character[random.randrange(0, len(startCards.character))]['value']
                    user_baggage = startCards.baggage[random.randrange(0, len(startCards.baggage))]['value']
                    if user_gender == '–ñ–µ–Ω—â–∏–Ω–∞' and user_age > 49 or user_gender == '–ú—É–∂—á–∏–Ω–∞' and user_age > 60:
                        user_childfree = '–ß–∞–π–ª–¥—Ñ—Ä–∏'
                    else:
                        user_childfree = startCards.childfree[random.randrange(0, len(startCards.childfree))]['value']
                    user_info = startCards.info[random.randrange(0, len(startCards.info))]['value']
                    bot.send_message(user_id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã –≤ —á–∞—Ç–µ: *{message.chat.title}*\n'
                                              f'*–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —á–∞–π–ª–¥—Ñ—Ä–∏:* {user_gender}. –í–æ–∑—Ä–∞—Å—Ç: {user_age} –ª–µ—Ç(–≥–æ–¥–∞). {user_childfree}\n'
                                                      f'*–ü—Ä–æ—Ñ–µ—Å—Å–∏—è*: {user_profession}\n'
                                                      f'*–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è*: {user_health}\n'
                                                      f'*–§–æ–±–∏—è*: {user_phobia}\n'
                                                      f'*–•–æ–±–±–∏*: {user_hobby}\n'
                                                      f'*–•–∞—Ä–∞–∫—Ç–µ—Ä*: {user_character}\n'
                                                      f'*–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*: {user_info}\n'
                                                      f'*–ë–∞–≥–∞–∂*: {user_baggage}\n'
                                                      f'*–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚Ññ1*: {user_first_action}\n'
                                                      f'*–ö–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚Ññ2*: {user_second_action}\n',
                                     markdown, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /reg_start')


# –ë–ª–æ–∫ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

@bot.message_handler(commands=['reg_start'])
def registration_start(message):
    if not reg.status(message.chat.id):
        reg.start(message.chat.id)
        for user_chat in users:
            try:
                del user_chat[message.chat.id]
            except KeyError:
                pass
        reg_keyboard = telebot.types.InlineKeyboardMarkup()
        reg_button = telebot.types.InlineKeyboardButton(text="–†–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='user_info')
        reg_keyboard.add(reg_button)
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É –ë—É–Ω–∫–µ—Ä –Ω–∞—á–∞—Ç–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.",
                         reply_markup=reg_keyboard, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –Ω–∞—á–∞—Ç–∞, –≤—Ç–æ—Ä—É—é –Ω–∞—á–∞—Ç—å –Ω–µ–ª—å–∑—è ü§∑‚Äç‚ôÇÔ∏è\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /reg_cancel")


@bot.message_handler(commands=['reg_cancel'])
def registration_cancel(message):
    global users
    global reg
    for user_chat in users:
        try:
            del user_chat[message.chat.id]
        except KeyError:
            pass
    reg.stop(message.chat.id)
    bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /reg_start")


# –ù–∏–∂–µ –±—É–¥–µ—Ç –∫–∞–ª–±—ç–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –±—É–Ω–∫–µ—Ä))0

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global users
    if call.message:
        in_users = False
        for user_chat in users:
            for chat_id in user_chat:
                if chat_id == call.message.chat.id:
                    for user_id in user_chat[chat_id]:
                        if user_chat[chat_id][user_id] == call.from_user.username:
                            in_users = True
                            break
        if call.data == "user_info" and not in_users:
            try:
                bot.send_message(call.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä—É "–ë—É–Ω–∫–µ—Ä"')
                users.insert(len(users), {call.message.chat.id:{call.from_user.id: call.from_user.username}})
                reg_keyboard = telebot.types.InlineKeyboardMarkup()
                actual_users = ''
                for user_chat in users:
                    for chat_id in user_chat:
                        if chat_id == call.message.chat.id:
                            for user_id in user_chat[chat_id]:
                                actual_users += user_chat[chat_id][user_id] + '\n'
                reg_button = telebot.types.InlineKeyboardButton(text="–†–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='user_info')
                reg_keyboard.add(reg_button)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É –ë—É–Ω–∫–µ—Ä –Ω–∞—á–∞—Ç–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É "
                                           f"\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: {actual_users}", reply_markup=reg_keyboard)
            except Exception:
                bot.send_message(call.message.chat.id, f'{call.from_user.username}, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤–ø–µ—Ä–≤—ã–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–∂–¥–µ, —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É –≤ "–ë—É–Ω–∫–µ—Ä"!')


if __name__ == '__main__':
    print(f'–ë–æ—Ç "{bot_name}" –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.')
    bot.polling(none_stop=True)
